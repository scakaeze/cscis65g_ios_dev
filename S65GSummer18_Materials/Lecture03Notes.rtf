{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 IowanOldStyle-Roman;\f2\fnil\fcharset0 LucidaGrande;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid101\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid201\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww18460\viewh16500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Lecture 3 Notes\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs48 \cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
THINGS IN SWIFT THAT EVERYONE HAS PROBLEMS WITH\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8226 	}The Type System\
{\listtext	\uc0\u8226 	}Closures, and in particular "trailing closure syntax"\
{\listtext	\uc0\u8226 	}Generics\
{\listtext	\uc0\u8226 	}Optionals\
{\listtext	\uc0\u8226 	}map/reduce/zip\
{\listtext	\uc0\u8226 	}value types and reference types\
{\listtext	\uc0\u8226 	}protocols and in particular their use in delegates and datasources\
{\listtext	\uc0\u8226 	}Model/View/Controller Separation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Required for Assignment 2\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\sl264\slmult1\slleading40\pardirnatural\partightenfactor0
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Type Aliases
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Base operations, in particular the modulo and ternary operators
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Base data types, in particular Int and Tuple
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Arrays and Arrays of Arrays
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Basic control flow including: if, guard and \strike0\striked0 switch
\f0\fs24 \cf0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Why and when we avoid the use of "for" as a control flow mechanism and use functional constructs instead
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 The Swift types: enum, struct and class and their syntax, differences and similarities
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Properties of enums, structs and classes
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Subscripts on structs and classes
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Functions and in particular higher order functions which take closures as arguments
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 Closures and in particular their capture rules and the trailing closure syntax
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}\strike \strikec2 How to read the signature and therefore the type of a func or closure
\f0\fs24 \cf0 \strike0\striked0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}Parameterized types (aka Generics) and their uses
\f0\fs24 \cf0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}Optional types and why they are genericized enums
\f0\fs24 \cf0 \
\ls2\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}The if-let and guard-let constructs
\f0\fs48 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\slleading40\pardirnatural\partightenfactor0

\fs24 \cf0 \

\fs36 So tonight:\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\sl264\slmult1\slleading40\pardirnatural\partightenfactor0
\ls3\ilvl0
\f1\fs27\fsmilli13750 \cf2 {\listtext	
\f2 \uc0\u9642 
\f1 	}Type Aliases\
{\listtext	
\f2 \uc0\u9642 
\f1 	}Arrays of Arrays\
{\listtext	
\f2 \uc0\u9642 
\f1 	}Base operations, in particular the modulo and ternary operators\
{\listtext	
\f2 \uc0\u9642 
\f1 	}The Swift types: enum, struct and class and their syntax, differences and similarities\
{\listtext	
\f2 \uc0\u9642 
\f1 	}Basic control flow including: if, guard and switch\
{\listtext	
\f2 \uc0\u9642 
\f1 	}Properties of enums, structs and classes\
{\listtext	
\f2 \uc0\u9642 
\f1 	}Subscripts on structs and classes\
{\listtext	
\f2 \uc0\u9642 
\f1 	}Parameterized types (aka Generics) and their uses\
{\listtext	
\f2 \uc0\u9642 
\f1 	}Optional types and why they are genericized enums\
{\listtext	
\f2 \uc0\u9642 
\f1 	}The if-let and guard-let constructs\
\pard\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\sl264\slmult1\slleading40\pardirnatural\partightenfactor0

\f0\fs48 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 \
}